{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","log","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","srcset","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0b04af8d.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// base url to make requests to movie database\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\"\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  // destructuring\n\n  const base_url = \"https://image.tmdb.org/t/p/original\";\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  console.log(movies);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then(url => {\n            const urlParams = new URLSearchParams(new URL(url).search);\n            setTrailerUrl(urlParams.get('v'))\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt=\"movie.name\"\n            srcset=\"\"\n          />\n        ))}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"cbd128f9f6cfc94364be09777fda2467\";\n\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\n};\n\nexport default requests;","import React, { useState,useEffect } from \"react\";\nimport axios from \"./axios\"\nimport requests from \"./requests\"\nimport  \"./Banner.css\";\n\n// snippet trick rfce\nfunction Banner() {\n\n  const [movie,setMovie] = useState([]);\n\n  useEffect(() => {                     /* useEffect runs based on a condition */\n   async function fetchData() {\n       const request = await axios.get(requests.fetchNetflixOriginals);\n       setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length-1)]);\n       return requests;\n   }   \n    fetchData();\n  }, [])\n\n  console.log(\"randomly selected movie is\",movie)\n\n  function truncate(str,n) {\n      return str?.length > n ? str.substr(0,n-1) + \"...\":str;\n  }\n\n  return (\n    <div>\n      <header\n        className=\"banner\"\n        style={{\n          backgroundSize: \"cover\",\n          backgroundImage: `url(\n          \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n          backgroundPosition: \"center center\",\n        }}\n      >\n        <div className=\"banner_contents\">\n          <h1 className=\"banner_title\">\n            {movie?.title || movie?.name || movie?.original_name}\n          </h1>\n          <div className=\"banner_buttons\">\n            <button className=\"banner_button\">Play</button>\n            <button className=\"banner_button\">My List</button>\n          </div>\n\n          <h1 className=\"banner_description\">{truncate(movie?.overview)}</h1>\n        </div>\n        <div className=\"banner--fadeBottom\" />\n      </header>\n    </div>\n  );\n}\n\nexport default Banner;\n","import React from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n\n  return (\n    <div>\n      <div className=\"nav\">\n        <img\n          className=\"nav_logo\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n          alt=\"Netflix Logo\"\n        />\n\n        <img\n          className=\"nav_avatar\"\n          src=\"https://png.pngtree.com/png-vector/20190307/ourmid/pngtree-vector-edit-profile-icon-png-image_779419.jpg\"\n          alt=\"Avatar\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\"\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow /* by deafult it means it has value true..it defaults to isLargeRow = {true} */\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}